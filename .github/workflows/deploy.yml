name: Deploy to AWS

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.0

    - name: Initialize Terraform
      run: terraform init

    - name: Validate Terraform
      run: terraform validate
    - name: Terraform Plan
      run: terraform plan

    - name: Apply Terraform
      id: apply
      run: terraform apply -auto-approve
      continue-on-error: true

    - name: Output ECR repository URL
      id: ecr_output
      run: echo "::set-output name=ecr_repository_url::$(terraform output -raw ecr_repository_url)"

    - name: Output Execution Role ARN
      id: execution_role_output
      run: echo "::set-output name=execution_role_arn::$(terraform output -raw execution_role_arn)"

    - name: Output Task Role ARN
      id: task_role_output
      run: echo "::set-output name=task_role_arn::$(terraform output -raw task_role_arn)"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.ecr_output.outputs.ecr_repository_url }}
        ECR_REPOSITORY: "my-app"
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Deploy to ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: |
          family: my-app-task
          networkMode: awsvpc
          containerDefinitions: |
            [{
              "name": "my-app-container",
              "image": "${{ steps.ecr_output.outputs.ecr_repository_url }}/my-app:${{ github.sha }}",
              "essential": true,
              "portMappings": [{
                "containerPort": 80,
                "hostPort": 80
              }]
            }]
          requiresCompatibilities:
            - FARGATE
          cpu: 256
          memory: 512
          executionRoleArn: ${{ steps.execution_role_output.outputs.execution_role_arn }}
          taskRoleArn: ${{ steps.task_role_output.outputs.task_role_arn }}
        service: my-app-service
        cluster: my-app-cluster
        wait-for-service-stability: true
