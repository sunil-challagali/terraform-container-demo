name: Deploy to AWS

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.0

    - name: Initialize Terraform
      run: terraform init

    - name: Validate Terraform
      run: terraform validate

    - name: Terraform Plan
      run: terraform plan

    - name: Apply Terraform
      id: apply
      run: terraform apply -auto-approve

    - name: Install jq
      run: sudo apt-get install -y jq

    - name: Capture Terraform outputs
      id: capture_outputs
      run: |
        terraform output -json > tf_outputs.json
        cat tf_outputs.json  # Debugging step to print tf_outputs.json

    - name: Output Terraform JSON
      run: |
        cat tf_outputs.json  # Print the content of the JSON file

    - name: Set environment variables from Terraform outputs
      id: set_env_vars
      run: |
        # Debugging: Check the contents of tf_outputs.json before parsing
        echo "Checking tf_outputs.json content"
        cat tf_outputs.json

        # Try extracting values
        ECR_REPOSITORY_URL=$(jq -r .ecr_repository_url.value tf_outputs.json)
        EXECUTION_ROLE_ARN=$(jq -r .execution_role_arn.value tf_outputs.json)
        TASK_ROLE_ARN=$(jq -r .task_role_arn.value tf_outputs.json)

        # Output extracted values to debug
        echo "ECR_REPOSITORY_URL=${ECR_REPOSITORY_URL}"
        echo "EXECUTION_ROLE_ARN=${EXECUTION_ROLE_ARN}"
        echo "TASK_ROLE_ARN=${TASK_ROLE_ARN}"

        # Export as environment variables for later steps
        echo "ECR_REPOSITORY_URL=${ECR_REPOSITORY_URL}" >> $GITHUB_ENV
        echo "EXECUTION_ROLE_ARN=${EXECUTION_ROLE_ARN}" >> $GITHUB_ENV
        echo "TASK_ROLE_ARN=${TASK_ROLE_ARN}" >> $GITHUB_ENV

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ env.ECR_REPOSITORY_URL }}
        ECR_REPOSITORY: "my-app"
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Deploy to ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: |
          family: my-app-task
          networkMode: awsvpc
          containerDefinitions: |
            [{
              "name": "my-app-container",
              "image": "${{ env.ECR_REPOSITORY_URL }}/my-app:${{ github.sha }}",
              "essential": true,
              "portMappings": [{
                "containerPort": 80,
                "hostPort": 80
              }]
            }]
          requiresCompatibilities:
            - FARGATE
          cpu: 256
          memory: 512
          executionRoleArn: ${{ env.EXECUTION_ROLE_ARN }}
          taskRoleArn: ${{ env.TASK_ROLE_ARN }}
        service: my-app-service
        cluster: my-app-cluster
        wait-for-service-stability: true
